% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/update_binary_un.R
\name{update_binary_un}
\alias{update_binary_un}
\title{Solve unsupervised binary tucker decomposition with no covariate or covariates are identity matrix}
\usage{
update_binary_un(tsr, core_shape, Nsim, cons, lambda = 1, alpha = 1,
  solver = NULL)
}
\arguments{
\item{tsr}{the data vector}

\item{core_shape}{the tucker rank of the given tensor}

\item{Nsim}{simulation times}

\item{cons}{the constrain method, "non" for without constrain, "vanilla" for global scale down once at each iteration,

                   "penalty" for add log-barrier penalty to object function.}

\item{lambda}{penalty coefficient when use "penalty" constrain.}

\item{alpha}{max norm consrain on ground truth}

\item{solver}{solver for solving object function when using "penalty" constrain, see "details"}
}
\value{
a list containing following components:

                   \code{W1} coefficient matrix on mode-1

                   \code{W2} coefficient matrix on mode-2

                   \code{C} factor matrix on mode-3

                   \code{G} core tensor

                   \code{lglk} the lig-likelihood
}
\description{
This is main updating function for the update of factor matrces and  core tensor
            \eqn{U = G \times_1 A \times_2 B \times_3 C}
}
\details{
When you choose constrain to be "penalty". It actually add log-barrier as regularizer to
           general object function (negative log-likelihood). It use solver in function "optim" to
           solve the objective function. You can choose any solver contained in function "optim".
}
