#Es = UpdateClusters.tensor(tensor.unfold4(x,3),tensor.unfold4(mu.array,3),Es,(rep(Ds,each=n)-1)*k+rep(Cs,times=p))
Es = UpdateClusters.tensor(tensor.unfold4(x,3),tensor.unfold4(mu.array,3),Es,
rep(Cs,times=p*s)+k*(rep(rep(Ds,each=n),times=s)-1)+k*r*(rep(Fs,each=n*p)-1))
objs <- c(objs, Objective(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
Es <- ReNumber(Es)
l = length(unique(Es))
objs <- c(objs, Objective(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
#Fs = UpdateClusters.tensor(tensor.unfold4(x,3),tensor.unfold4(mu.array,3),Fs,(rep(Ds,each=n)-1)*k+rep(Cs,times=p))
Fs = UpdateClusters.tensor(tensor.unfold4(x,4),tensor.unfold4(mu.array,4),Fs,
rep(Cs,times=p*q)+k*(rep(rep(Ds,each=n),times=q)-1)+k*r*(rep(Es,each=n*p)-1))
objs <- c(objs, Objective(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
Fs <- ReNumber(Fs)
m = length(unique(Fs))
mu.array = UpdateMus.tensor4(x,Cs,Ds,Es,Fs,lambda, method=method)
objs <- c(objs, Objective(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
improvement <- abs(objs[length(objs)] - objs[length(objs) -
6])/abs(objs[length(objs) - 6])
i <- i + 1
if(trace) cat("step",i,",improvement=",improvement,".\n")
if (is.na(improvement)) break
}
if (i > max.iter) {
warning("The algorithm has not converged by the specified maximum number of iteration.\n")
}
if(center==TRUE){
mu.array <- mu.array + mustemp
}
mu.array[abs(mu.array)<=1e-6] = 0
return(list("judgeX"=mu.array[Cs,Ds,Es,Fs, drop=FALSE],"Cs"=Cs,"Ds"=Ds,"Es"=Es,"Fs"=Fs,"objs"=objs[length(objs)], "mus"=mu.array))
}
classify4(try$x,k,r,l,m)
r
classify4 = function(x,k,r,l,m,lambda=0,max.iter=1000,threshold = 1e-15,trace=FALSE,Cs.init=NULL,Ds.init=NULL,Es.init=NULL,nstart=20,method="L0",center=FALSE){
n = dim(x)[1]; p = dim(x)[2]; q = dim(x)[3]; s = dim(x)[4]
if(center == TRUE) {
mustemp <- mean(x)
x <- x-mustemp
}
if(is.null(Cs.init)){
if(k==1) Cs = rep(1,n) else {Cs  = kmeans(tensor.unfold4(x,1),k,nstart = nstart)$cluster}
} else {
Cs = Cs.init
}
if(is.null(Ds.init)){
if(r==1) Ds = rep(1,p) else {Ds  = kmeans(tensor.unfold4(x,2),r,nstart = nstart)$cluster}
} else {
Ds = Ds.init
}
if(is.null(Es.init)){
if(l==1) Es = rep(1,q) else {Es  = kmeans(tensor.unfold4(x,3),l,nstart = nstart)$cluster}
} else {
Es = Es.init
}
if(is.null(Es.init)){
if(m==1) Es = rep(1,s) else {Fs  = kmeans(tensor.unfold4(x,4),m,nstart = nstart)$cluster}
} else {
Fs = Fs.init
}
objs <- 1e+15
improvement <- 1e+10
i <- 1
mu.array = UpdateMus.tensor4(x,Cs,Ds,Es,Fs,lambda,method=method)
while((improvement > threshold) & (i <= max.iter)){
#Cs = UpdateClusters.tensor(tensor.unfold4(x),tensor.unfold4(mu.array),Cs,(rep(Ds,each=q)-1)*l+rep(Es,times=p))
Cs = UpdateClusters.tensor(tensor.unfold4(x),tensor.unfold4(mu.array),Cs,
rep(Ds,times=q*s)+r*(rep(rep(Es,each=p),times=s)-1)+r*l*(rep(Fs,each=p*q))-1)
objs <- c(objs, Objective(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
Cs <- ReNumber(Cs)
k = length(unique(Cs))
objs <- c(objs, Objective(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
#Ds = UpdateClusters.tensor(tensor.unfold4(x,2),tensor.unfold4(mu.array,2),Ds,(rep(Es,each=n)-1)*k+rep(Cs,times=q))
Ds = UpdateClusters.tensor(tensor.unfold4(x,2),tensor.unfold4(mu.array,2),Ds,
rep(Cs,times=q*s)+k*(rep(rep(Es,each=n),times=s)-1)+k*l*(rep(Fs,each=n*q)-1))
objs <- c(objs, Objective(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
Ds <- ReNumber(Ds)
r = length(unique(Ds))
objs <- c(objs, Objective(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
#Es = UpdateClusters.tensor(tensor.unfold4(x,3),tensor.unfold4(mu.array,3),Es,(rep(Ds,each=n)-1)*k+rep(Cs,times=p))
Es = UpdateClusters.tensor(tensor.unfold4(x,3),tensor.unfold4(mu.array,3),Es,
rep(Cs,times=p*s)+k*(rep(rep(Ds,each=n),times=s)-1)+k*r*(rep(Fs,each=n*p)-1))
objs <- c(objs, Objective(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
Es <- ReNumber(Es)
l = length(unique(Es))
objs <- c(objs, Objective(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
#Fs = UpdateClusters.tensor(tensor.unfold4(x,3),tensor.unfold4(mu.array,3),Fs,(rep(Ds,each=n)-1)*k+rep(Cs,times=p))
Fs = UpdateClusters.tensor(tensor.unfold4(x,4),tensor.unfold4(mu.array,4),Fs,
rep(Cs,times=p*q)+k*(rep(rep(Ds,each=n),times=q)-1)+k*r*(rep(Es,each=n*p)-1))
objs <- c(objs, Objective(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
Fs <- ReNumber(Fs)
m = length(unique(Fs))
mu.array = UpdateMus.tensor4(x,Cs,Ds,Es,Fs,lambda, method=method)
objs <- c(objs, Objective(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
improvement <- abs(objs[length(objs)] - objs[length(objs) -
7])/abs(objs[length(objs) - 7])
i <- i + 1
if(trace) cat("step",i,",improvement=",improvement,".\n")
if (is.na(improvement)) break
}
if (i > max.iter) {
warning("The algorithm has not converged by the specified maximum number of iteration.\n")
}
if(center==TRUE){
mu.array <- mu.array + mustemp
}
mu.array[abs(mu.array)<=1e-6] = 0
return(list("judgeX"=mu.array[Cs,Ds,Es,Fs, drop=FALSE],"Cs"=Cs,"Ds"=Ds,"Es"=Es,"Fs"=Fs,"objs"=objs[length(objs)], "mus"=mu.array))
}
classify4(try$x,k,r,l,m)
classify4 = function(x,k,r,l,m,lambda=0,max.iter=1000,threshold = 1e-15,trace=FALSE,Cs.init=NULL,Ds.init=NULL,Es.init=NULL,nstart=20,method="L0",center=FALSE){
n = dim(x)[1]; p = dim(x)[2]; q = dim(x)[3]; s = dim(x)[4]
if(center == TRUE) {
mustemp <- mean(x)
x <- x-mustemp
}
if(is.null(Cs.init)){
if(k==1) Cs = rep(1,n) else {Cs  = kmeans(tensor.unfold4(x,1),k,nstart = nstart)$cluster}
} else {
Cs = Cs.init
}
if(is.null(Ds.init)){
if(r==1) Ds = rep(1,p) else {Ds  = kmeans(tensor.unfold4(x,2),r,nstart = nstart)$cluster}
} else {
Ds = Ds.init
}
if(is.null(Es.init)){
if(l==1) Es = rep(1,q) else {Es  = kmeans(tensor.unfold4(x,3),l,nstart = nstart)$cluster}
} else {
Es = Es.init
}
if(is.null(Es.init)){
if(m==1) Es = rep(1,s) else {Fs  = kmeans(tensor.unfold4(x,4),m,nstart = nstart)$cluster}
} else {
Fs = Fs.init
}
objs <- 1e+15
improvement <- 1e+10
i <- 1
mu.array = UpdateMus.tensor4(x,Cs,Ds,Es,Fs,lambda,method=method)
while((improvement > threshold) & (i <= max.iter)){
#Cs = UpdateClusters.tensor(tensor.unfold4(x),tensor.unfold4(mu.array),Cs,(rep(Ds,each=q)-1)*l+rep(Es,times=p))
print(rep(Ds,times=q*s)+r*(rep(rep(Es,each=p),times=s)-1)+r*l*(rep(Fs,each=p*q))-1)
Cs = UpdateClusters.tensor(tensor.unfold4(x),tensor.unfold4(mu.array),Cs,
rep(Ds,times=q*s)+r*(rep(rep(Es,each=p),times=s)-1)+r*l*(rep(Fs,each=p*q))-1)
objs <- c(objs, Objective(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
Cs <- ReNumber(Cs)
k = length(unique(Cs))
objs <- c(objs, Objective(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
#Ds = UpdateClusters.tensor(tensor.unfold4(x,2),tensor.unfold4(mu.array,2),Ds,(rep(Es,each=n)-1)*k+rep(Cs,times=q))
Ds = UpdateClusters.tensor(tensor.unfold4(x,2),tensor.unfold4(mu.array,2),Ds,
rep(Cs,times=q*s)+k*(rep(rep(Es,each=n),times=s)-1)+k*l*(rep(Fs,each=n*q)-1))
objs <- c(objs, Objective(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
Ds <- ReNumber(Ds)
r = length(unique(Ds))
objs <- c(objs, Objective(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
#Es = UpdateClusters.tensor(tensor.unfold4(x,3),tensor.unfold4(mu.array,3),Es,(rep(Ds,each=n)-1)*k+rep(Cs,times=p))
Es = UpdateClusters.tensor(tensor.unfold4(x,3),tensor.unfold4(mu.array,3),Es,
rep(Cs,times=p*s)+k*(rep(rep(Ds,each=n),times=s)-1)+k*r*(rep(Fs,each=n*p)-1))
objs <- c(objs, Objective(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
Es <- ReNumber(Es)
l = length(unique(Es))
objs <- c(objs, Objective(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
#Fs = UpdateClusters.tensor(tensor.unfold4(x,3),tensor.unfold4(mu.array,3),Fs,(rep(Ds,each=n)-1)*k+rep(Cs,times=p))
Fs = UpdateClusters.tensor(tensor.unfold4(x,4),tensor.unfold4(mu.array,4),Fs,
rep(Cs,times=p*q)+k*(rep(rep(Ds,each=n),times=q)-1)+k*r*(rep(Es,each=n*p)-1))
objs <- c(objs, Objective(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
Fs <- ReNumber(Fs)
m = length(unique(Fs))
mu.array = UpdateMus.tensor4(x,Cs,Ds,Es,Fs,lambda, method=method)
objs <- c(objs, Objective(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
improvement <- abs(objs[length(objs)] - objs[length(objs) -
7])/abs(objs[length(objs) - 7])
i <- i + 1
if(trace) cat("step",i,",improvement=",improvement,".\n")
if (is.na(improvement)) break
}
if (i > max.iter) {
warning("The algorithm has not converged by the specified maximum number of iteration.\n")
}
if(center==TRUE){
mu.array <- mu.array + mustemp
}
mu.array[abs(mu.array)<=1e-6] = 0
return(list("judgeX"=mu.array[Cs,Ds,Es,Fs, drop=FALSE],"Cs"=Cs,"Ds"=Ds,"Es"=Es,"Fs"=Fs,"objs"=objs[length(objs)], "mus"=mu.array))
}
classify4(try$x,k,r,l,m)
classify4 = function(x,k,r,l,m,lambda=0,max.iter=1000,threshold = 1e-15,trace=FALSE,Cs.init=NULL,Ds.init=NULL,Es.init=NULL,nstart=20,method="L0",center=FALSE){
n = dim(x)[1]; p = dim(x)[2]; q = dim(x)[3]; s = dim(x)[4]
if(center == TRUE) {
mustemp <- mean(x)
x <- x-mustemp
}
if(is.null(Cs.init)){
if(k==1) Cs = rep(1,n) else {Cs  = kmeans(tensor.unfold4(x,1),k,nstart = nstart)$cluster}
} else {
Cs = Cs.init
}
if(is.null(Ds.init)){
if(r==1) Ds = rep(1,p) else {Ds  = kmeans(tensor.unfold4(x,2),r,nstart = nstart)$cluster}
} else {
Ds = Ds.init
}
if(is.null(Es.init)){
if(l==1) Es = rep(1,q) else {Es  = kmeans(tensor.unfold4(x,3),l,nstart = nstart)$cluster}
} else {
Es = Es.init
}
if(is.null(Es.init)){
if(m==1) Es = rep(1,s) else {Fs  = kmeans(tensor.unfold4(x,4),m,nstart = nstart)$cluster}
} else {
Fs = Fs.init
}
objs <- 1e+15
improvement <- 1e+10
i <- 1
mu.array = UpdateMus.tensor4(x,Cs,Ds,Es,Fs,lambda,method=method)
while((improvement > threshold) & (i <= max.iter)){
print(Cs)
print(Ds)
#Cs = UpdateClusters.tensor(tensor.unfold4(x),tensor.unfold4(mu.array),Cs,(rep(Ds,each=q)-1)*l+rep(Es,times=p))
print(rep(Ds,times=q*s)+r*(rep(rep(Es,each=p),times=s)-1)+r*l*(rep(Fs,each=p*q))-1)
Cs = UpdateClusters.tensor(tensor.unfold4(x),tensor.unfold4(mu.array),Cs,
rep(Ds,times=q*s)+r*(rep(rep(Es,each=p),times=s)-1)+r*l*(rep(Fs,each=p*q))-1)
objs <- c(objs, Objective(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
Cs <- ReNumber(Cs)
k = length(unique(Cs))
objs <- c(objs, Objective(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
#Ds = UpdateClusters.tensor(tensor.unfold4(x,2),tensor.unfold4(mu.array,2),Ds,(rep(Es,each=n)-1)*k+rep(Cs,times=q))
Ds = UpdateClusters.tensor(tensor.unfold4(x,2),tensor.unfold4(mu.array,2),Ds,
rep(Cs,times=q*s)+k*(rep(rep(Es,each=n),times=s)-1)+k*l*(rep(Fs,each=n*q)-1))
objs <- c(objs, Objective(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
Ds <- ReNumber(Ds)
r = length(unique(Ds))
objs <- c(objs, Objective(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
#Es = UpdateClusters.tensor(tensor.unfold4(x,3),tensor.unfold4(mu.array,3),Es,(rep(Ds,each=n)-1)*k+rep(Cs,times=p))
Es = UpdateClusters.tensor(tensor.unfold4(x,3),tensor.unfold4(mu.array,3),Es,
rep(Cs,times=p*s)+k*(rep(rep(Ds,each=n),times=s)-1)+k*r*(rep(Fs,each=n*p)-1))
objs <- c(objs, Objective(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
Es <- ReNumber(Es)
l = length(unique(Es))
objs <- c(objs, Objective(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
#Fs = UpdateClusters.tensor(tensor.unfold4(x,3),tensor.unfold4(mu.array,3),Fs,(rep(Ds,each=n)-1)*k+rep(Cs,times=p))
Fs = UpdateClusters.tensor(tensor.unfold4(x,4),tensor.unfold4(mu.array,4),Fs,
rep(Cs,times=p*q)+k*(rep(rep(Ds,each=n),times=q)-1)+k*r*(rep(Es,each=n*p)-1))
objs <- c(objs, Objective(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
Fs <- ReNumber(Fs)
m = length(unique(Fs))
mu.array = UpdateMus.tensor4(x,Cs,Ds,Es,Fs,lambda, method=method)
objs <- c(objs, Objective(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
improvement <- abs(objs[length(objs)] - objs[length(objs) -
7])/abs(objs[length(objs) - 7])
i <- i + 1
if(trace) cat("step",i,",improvement=",improvement,".\n")
if (is.na(improvement)) break
}
if (i > max.iter) {
warning("The algorithm has not converged by the specified maximum number of iteration.\n")
}
if(center==TRUE){
mu.array <- mu.array + mustemp
}
mu.array[abs(mu.array)<=1e-6] = 0
return(list("judgeX"=mu.array[Cs,Ds,Es,Fs, drop=FALSE],"Cs"=Cs,"Ds"=Ds,"Es"=Es,"Fs"=Fs,"objs"=objs[length(objs)], "mus"=mu.array))
}
classify4(try$x,k,r,l,m)
x=try$x;lambda=0;max.iter=1000;threshold=1e-15;trace=FALSE;Cs.init=NULL;Ds.init=NULL;Es.init=NULL;nstart=20;method="L0";center=FALSE
n = dim(x)[1]; p = dim(x)[2]; q = dim(x)[3]; s = dim(x)[4]
if(center == TRUE) {
mustemp <- mean(x)
x <- x-mustemp
}
if(is.null(Cs.init)){
if(k==1) Cs = rep(1,n) else {Cs  = kmeans(tensor.unfold4(x,1),k,nstart = nstart)$cluster}
} else {
Cs = Cs.init
}
if(is.null(Ds.init)){
if(r==1) Ds = rep(1,p) else {Ds  = kmeans(tensor.unfold4(x,2),r,nstart = nstart)$cluster}
} else {
Ds = Ds.init
}
if(is.null(Es.init)){
if(l==1) Es = rep(1,q) else {Es  = kmeans(tensor.unfold4(x,3),l,nstart = nstart)$cluster}
} else {
Es = Es.init
}
if(is.null(Es.init)){
if(m==1) Es = rep(1,s) else {Fs  = kmeans(tensor.unfold4(x,4),m,nstart = nstart)$cluster}
} else {
Fs = Fs.init
}
objs <- 1e+15
improvement <- 1e+10
i <- 1
mu.array = UpdateMus.tensor4(x,Cs,Ds,Es,Fs,lambda,method=method)
#Cs = UpdateClusters.tensor(tensor.unfold4(x),tensor.unfold4(mu.array),Cs,(rep(Ds,each=q)-1)*l+rep(Es,times=p))
print(rep(Ds,times=q*s)+r*(rep(rep(Es,each=p),times=s)-1)+r*l*(rep(Fs,each=p*q))-1)
Cs
Ds
Es
Fs
rep(rep(Es,each=p),times=s)-1
rep(Ds,times=q*s)
rep(Fs,each=p*q))-1
print(rep(Ds,times=q*s)+r*(rep(rep(Es,each=p),times=s)-1)+r*l*(rep(Fs,each=p*q)-1))
classify4 = function(x,k,r,l,m,lambda=0,max.iter=1000,threshold = 1e-15,trace=FALSE,Cs.init=NULL,Ds.init=NULL,Es.init=NULL,nstart=20,method="L0",center=FALSE){
#x=try$x;lambda=0;max.iter=1000;threshold=1e-15;trace=FALSE;Cs.init=NULL;Ds.init=NULL;Es.init=NULL;nstart=20;method="L0";center=FALSE
n = dim(x)[1]; p = dim(x)[2]; q = dim(x)[3]; s = dim(x)[4]
if(center == TRUE) {
mustemp <- mean(x)
x <- x-mustemp
}
if(is.null(Cs.init)){
if(k==1) Cs = rep(1,n) else {Cs  = kmeans(tensor.unfold4(x,1),k,nstart = nstart)$cluster}
} else {
Cs = Cs.init
}
if(is.null(Ds.init)){
if(r==1) Ds = rep(1,p) else {Ds  = kmeans(tensor.unfold4(x,2),r,nstart = nstart)$cluster}
} else {
Ds = Ds.init
}
if(is.null(Es.init)){
if(l==1) Es = rep(1,q) else {Es  = kmeans(tensor.unfold4(x,3),l,nstart = nstart)$cluster}
} else {
Es = Es.init
}
if(is.null(Es.init)){
if(m==1) Es = rep(1,s) else {Fs  = kmeans(tensor.unfold4(x,4),m,nstart = nstart)$cluster}
} else {
Fs = Fs.init
}
objs <- 1e+15
improvement <- 1e+10
i <- 1
mu.array = UpdateMus.tensor4(x,Cs,Ds,Es,Fs,lambda,method=method)
while((improvement > threshold) & (i <= max.iter)){
#Cs = UpdateClusters.tensor(tensor.unfold4(x),tensor.unfold4(mu.array),Cs,(rep(Ds,each=q)-1)*l+rep(Es,times=p))
Cs = UpdateClusters.tensor(tensor.unfold4(x),tensor.unfold4(mu.array),Cs,
rep(Ds,times=q*s)+r*(rep(rep(Es,each=p),times=s)-1)+r*l*(rep(Fs,each=p*q)-1))
objs <- c(objs, Objective(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
Cs <- ReNumber(Cs)
k = length(unique(Cs))
objs <- c(objs, Objective(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
#Ds = UpdateClusters.tensor(tensor.unfold4(x,2),tensor.unfold4(mu.array,2),Ds,(rep(Es,each=n)-1)*k+rep(Cs,times=q))
Ds = UpdateClusters.tensor(tensor.unfold4(x,2),tensor.unfold4(mu.array,2),Ds,
rep(Cs,times=q*s)+k*(rep(rep(Es,each=n),times=s)-1)+k*l*(rep(Fs,each=n*q)-1))
objs <- c(objs, Objective(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
Ds <- ReNumber(Ds)
r = length(unique(Ds))
objs <- c(objs, Objective(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
#Es = UpdateClusters.tensor(tensor.unfold4(x,3),tensor.unfold4(mu.array,3),Es,(rep(Ds,each=n)-1)*k+rep(Cs,times=p))
Es = UpdateClusters.tensor(tensor.unfold4(x,3),tensor.unfold4(mu.array,3),Es,
rep(Cs,times=p*s)+k*(rep(rep(Ds,each=n),times=s)-1)+k*r*(rep(Fs,each=n*p)-1))
objs <- c(objs, Objective(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
Es <- ReNumber(Es)
l = length(unique(Es))
objs <- c(objs, Objective(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
#Fs = UpdateClusters.tensor(tensor.unfold4(x,3),tensor.unfold4(mu.array,3),Fs,(rep(Ds,each=n)-1)*k+rep(Cs,times=p))
Fs = UpdateClusters.tensor(tensor.unfold4(x,4),tensor.unfold4(mu.array,4),Fs,
rep(Cs,times=p*q)+k*(rep(rep(Ds,each=n),times=q)-1)+k*r*(rep(Es,each=n*p)-1))
objs <- c(objs, Objective(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
Fs <- ReNumber(Fs)
m = length(unique(Fs))
mu.array = UpdateMus.tensor4(x,Cs,Ds,Es,Fs,lambda, method=method)
objs <- c(objs, Objective(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
improvement <- abs(objs[length(objs)] - objs[length(objs) -
7])/abs(objs[length(objs) - 7])
i <- i + 1
if(trace) cat("step",i,",improvement=",improvement,".\n")
if (is.na(improvement)) break
}
if (i > max.iter) {
warning("The algorithm has not converged by the specified maximum number of iteration.\n")
}
if(center==TRUE){
mu.array <- mu.array + mustemp
}
mu.array[abs(mu.array)<=1e-6] = 0
return(list("judgeX"=mu.array[Cs,Ds,Es,Fs, drop=FALSE],"Cs"=Cs,"Ds"=Ds,"Es"=Es,"Fs"=Fs,"objs"=objs[length(objs)], "mus"=mu.array))
}
classify4(try$x,k,r,l,m)
classify4 = function(x,k,r,l,m,lambda=0,max.iter=1000,threshold = 1e-15,trace=FALSE,Cs.init=NULL,Ds.init=NULL,Es.init=NULL,nstart=20,method="L0",center=FALSE){
#x=try$x;lambda=0;max.iter=1000;threshold=1e-15;trace=FALSE;Cs.init=NULL;Ds.init=NULL;Es.init=NULL;nstart=20;method="L0";center=FALSE
n = dim(x)[1]; p = dim(x)[2]; q = dim(x)[3]; s = dim(x)[4]
if(center == TRUE) {
mustemp <- mean(x)
x <- x-mustemp
}
if(is.null(Cs.init)){
if(k==1) Cs = rep(1,n) else {Cs  = kmeans(tensor.unfold4(x,1),k,nstart = nstart)$cluster}
} else {
Cs = Cs.init
}
if(is.null(Ds.init)){
if(r==1) Ds = rep(1,p) else {Ds  = kmeans(tensor.unfold4(x,2),r,nstart = nstart)$cluster}
} else {
Ds = Ds.init
}
if(is.null(Es.init)){
if(l==1) Es = rep(1,q) else {Es  = kmeans(tensor.unfold4(x,3),l,nstart = nstart)$cluster}
} else {
Es = Es.init
}
if(is.null(Es.init)){
if(m==1) Es = rep(1,s) else {Fs  = kmeans(tensor.unfold4(x,4),m,nstart = nstart)$cluster}
} else {
Fs = Fs.init
}
objs <- 1e+15
improvement <- 1e+10
i <- 1
mu.array = UpdateMus.tensor4(x,Cs,Ds,Es,Fs,lambda,method=method)
while((improvement > threshold) & (i <= max.iter)){
#Cs = UpdateClusters.tensor(tensor.unfold4(x),tensor.unfold4(mu.array),Cs,(rep(Ds,each=q)-1)*l+rep(Es,times=p))
Cs = UpdateClusters.tensor(tensor.unfold4(x),tensor.unfold4(mu.array),Cs,
rep(Ds,times=q*s)+r*(rep(rep(Es,each=p),times=s)-1)+r*l*(rep(Fs,each=p*q)-1))
objs <- c(objs, Objective4(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
Cs <- ReNumber(Cs)
k = length(unique(Cs))
objs <- c(objs, Objective4(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
#Ds = UpdateClusters.tensor(tensor.unfold4(x,2),tensor.unfold4(mu.array,2),Ds,(rep(Es,each=n)-1)*k+rep(Cs,times=q))
Ds = UpdateClusters.tensor(tensor.unfold4(x,2),tensor.unfold4(mu.array,2),Ds,
rep(Cs,times=q*s)+k*(rep(rep(Es,each=n),times=s)-1)+k*l*(rep(Fs,each=n*q)-1))
objs <- c(objs, Objective4(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
Ds <- ReNumber(Ds)
r = length(unique(Ds))
objs <- c(objs, Objective4(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
#Es = UpdateClusters.tensor(tensor.unfold4(x,3),tensor.unfold4(mu.array,3),Es,(rep(Ds,each=n)-1)*k+rep(Cs,times=p))
Es = UpdateClusters.tensor(tensor.unfold4(x,3),tensor.unfold4(mu.array,3),Es,
rep(Cs,times=p*s)+k*(rep(rep(Ds,each=n),times=s)-1)+k*r*(rep(Fs,each=n*p)-1))
objs <- c(objs, Objective4(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
Es <- ReNumber(Es)
l = length(unique(Es))
objs <- c(objs, Objective4(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
#Fs = UpdateClusters.tensor(tensor.unfold4(x,3),tensor.unfold4(mu.array,3),Fs,(rep(Ds,each=n)-1)*k+rep(Cs,times=p))
Fs = UpdateClusters.tensor(tensor.unfold4(x,4),tensor.unfold4(mu.array,4),Fs,
rep(Cs,times=p*q)+k*(rep(rep(Ds,each=n),times=q)-1)+k*r*(rep(Es,each=n*p)-1))
objs <- c(objs, Objective4(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
Fs <- ReNumber(Fs)
m = length(unique(Fs))
mu.array = UpdateMus.tensor4(x,Cs,Ds,Es,Fs,lambda, method=method)
objs <- c(objs, Objective4(x, mu.array, Cs, Ds, Es, Fs, lambda = lambda, method=method))
improvement <- abs(objs[length(objs)] - objs[length(objs) -
7])/abs(objs[length(objs) - 7])
i <- i + 1
if(trace) cat("step",i,",improvement=",improvement,".\n")
if (is.na(improvement)) break
}
if (i > max.iter) {
warning("The algorithm has not converged by the specified maximum number of iteration.\n")
}
if(center==TRUE){
mu.array <- mu.array + mustemp
}
mu.array[abs(mu.array)<=1e-6] = 0
return(list("judgeX"=mu.array[Cs,Ds,Es,Fs, drop=FALSE],"Cs"=Cs,"Ds"=Ds,"Es"=Es,"Fs"=Fs,"objs"=objs[length(objs)], "mus"=mu.array))
}
classify4(try$x,k,r,l,m)
try$x[,,,1]
plot_tensor(try$x[,,,1])
n=20;p=20;q=20;s=20;k=2;r=2;l=2;m=2
try = get.data4(n,p,q,s,k,r,l,m)
classify4(try$x,k,r,l,m)
plot_tensor(try$x[,,,1])
sim = classify4(try$x,k,r,l,m)
plot_tensor(try$x[,,,1])
n=30;p=30;q=30;s=30;k=4;r=4;l=2;m=2
try = get.data4(n,p,q,s,k,r,l,m)
sim = classify4(try$x,k,r,l,m)
plot_tensor(try$x[,,,1])
plot_tensor(sim$judgeX[,,,1])
plot_tensor(try$x[,,,1])
plot_tensor(try$mus[,,,1])
plot_tensor(try$truthX[,,,1])
plot_tensor(sim$judgeX[,,,1])
plot_tensor(try$truthX[,,,1])
plot_tensor(sim$judgeX[,,,1])
ggplot(data=figure1, aes(x=npq,y=sqrtmse))+geom_line(aes(color=d1d2d3))+
scale_shape_manual(values=seq(0,15))+
geom_point(aes(shape=d1d2d3))+
labs(x=expression(Dimension~"in"~the~first~mode~d[1]), y="Root mean squared error (RMSE)",
color="Number of clusters", shape="Number of clusters")
save.image("~/办公/课程/lab/nip/figures/figure3/figure3.RData")
figure1 = data.frame(npq = rep(seq(20,70,by=5),each=7), d1d2d3 = as.factor(rep(c('(4,4,4)','(4,4,8)','(4,8,8)',"(8,8,8)","(8,8,12)","(14,14,14)","(19,19,19)"), times=11)),
sqrtmse = sqrt(mse.re1), rescalednpq = sqrt(p1*q1/log(rep(c(4,4,4,8,8,14,19),times=11))))
ggplot(data=figure1, aes(x=npq,y=sqrtmse))+geom_line(aes(color=d1d2d3))+
scale_shape_manual(values=seq(0,15))+
geom_point(aes(shape=d1d2d3))+
labs(x=expression(Dimension~"in"~the~first~mode~d[1]), y="Root mean squared error (RMSE)",
color="Number of clusters", shape="Number of clusters")
mse4 = function(bires, data){
npqs = dim(bires$judgeX)
n = npqs[1]; p = npqs[2]; q = npqs[3]; s = npqs[4]
return(sum((bires$judgeX-data$truthX)^2)/n/p/q/s)
}
p2 = c(); q2 = c(); s2 = c()
mse.re2 = c()
for (n in seq(20,70,by=5)){
set.seed(8)
k = 4; r = 4; l = 4; m = 4
p = floor(n*log(k)/log(r)); q = floor(n*log(k)/log(l)); s = floor(n*log(k)/log(m))
p2 = c(p2, p); q2 = c(q2, q); s2 = c(s2, s)
mse_in = c()
for (j in 1:50){
data = get.data4(n,p,q,s,k,r,l,m)
bires = classify4(data$x, k, r, l, m)
mse_in = c(mse_in, mse(bires, data))
}
mse.re2 = c(mse.re2, mean(mse_in))
}
n=30;p=30;q=30;s=30;k=4;r=4;l=2;m=2
try = get.data4(n,p,q,s,k,r,l,m)
