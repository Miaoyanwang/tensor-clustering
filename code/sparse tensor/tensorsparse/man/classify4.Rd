% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/classify4.R
\name{classify4}
\alias{classify4}
\title{Perform tensor clustering via TBM method}
\usage{
classify4(x, k, r, l, m, lambda = 0, max.iter = 1000,
  threshold = 1e-15, trace = FALSE, Cs.init = NULL, Ds.init = NULL,
  Es.init = NULL, Fs.init = NULL, nstart = 20, method = "L0",
  center = FALSE)
}
\arguments{
\item{x}{a four-dimensional array}

\item{k}{\eqn{d_1}: the clusters number of mode 1}

\item{r}{\eqn{d_2}: the clusters number of mode 2}

\item{l}{\eqn{d_3}: the clusters number of mode 3}

\item{m}{\eqn{d_4}: the clusters number of mode 4}

\item{lambda}{a positive numeric value. The coefficient of the regularized term.}

\item{max.iter}{a positive integer. The Maximum times of iteration.}

\item{threshold}{a positive small numeric value which determines whether the algorithm converges or not.}

\item{trace}{logic value. If true, it would print the iteration situation.}

\item{Cs.init}{vector or NULL. Initial clsuter result of mode 1.}

\item{Ds.init}{vector or NULL. Initial clsuter result of mode 2.}

\item{Es.init}{vector or NULL. Initial clsuter result of mode 3.}

\item{Fs.init}{vector or NULL. Initial clsuter result of mode 4.}

\item{nstart}{positive interger. The same as the "nstart" in kmeans().}

\item{method}{two options: "L0", "L1". Two methods use different penalties, where "L0" indicating L0 penalty and "L1" indicating Lasso penalty.}

\item{center}{logic value that indicates whether run "x = x-mean(x)" before performing clustering.}
}
\value{
a list   
\code{judgeX} estimated underlying mean signal.   

               \code{Cs} clustering result of mode 1.  
               
               \code{Ds} clustering result of mode 2.  
               
               \code{Es} clustering result of mode 3.
               
               \code{Fs} clustering result of mode 4. 
               
               \code{mus} estimated underlying mean signal of each cluster.
}
\description{
This function performs sparse clustering on a three-dimensional tensor via TBM method.
}
